
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/solvers/ex_quad_problems_basic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_solvers_ex_quad_problems_basic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_solvers_ex_quad_problems_basic.py:


Solving quadratic problems basic
--------------------------------

.. seealso::
    See :ref:`sphx_glr_auto_examples_solvers_ex_quad_problems_advanced.py` for an advanced
    example how to solve quadratic problems.
    See :ref:`sphx_glr_auto_examples_solvers_ex_linear_problems_basic.py` for an introduction
    to solving linear problems.
    See :ref:`sphx_glr_auto_examples_solvers_ex_linear_problems_advanced.py` for an advanced
    example how to solve linear problems.

.. GENERATED FROM PYTHON SOURCE LINES 16-23

This notebook elaborates on how to quadratic problems, e.g. the
:class:`moscot.problems.time.LineageProblem`,
the :class:`moscot.problems.spatio_temporal.SpatioTemporalProblem`,
the :class:`moscot.problems.space.MappingProblem`,
the :class:`moscot.problems.time.AlignmentProblem`,
the :class:`moscot.problems.generic.GWProblem`,
and the the :class:`moscot.problems.generic.FGWProblem`.

.. GENERATED FROM PYTHON SOURCE LINES 23-34

.. code-block:: default


    from moscot.datasets import simulate_data
    from moscot.problems.generic import GWProblem, FGWProblem
    import scanpy as sc

    import numpy as np

    adata = simulate_data(n_distributions=2, key="batch", quad_term="spatial")
    sc.pp.pca(adata)
    print(adata)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/moscot/datasets/_datasets.py:251: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      AnnData(
    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/anndata/_core/anndata.py:1785: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      [AnnData(sparse.csr_matrix(a.shape), obs=a.obs) for a in all_adatas],
    AnnData object with n_obs × n_vars = 40 × 60
        obs: 'batch', 'celltype'
        uns: 'pca'
        obsm: 'spatial', 'X_pca'
        varm: 'PCs'




.. GENERATED FROM PYTHON SOURCE LINES 35-46

Basic parameters
~~~~~~~~~~~~~~~~
There are some parameters in quadratic problems which play the same role as
in linear problems. Hence, we refer to TODO for the role of `epsilon`, `tau_a`,
and `tau_b`. In fused quadratic problems (also referred to as Fused Gromov-
Wasserstein) there is an additional parameter `alpha` defining the convex
combination between the quadratic and the linear term. Setting `alpha=1` only
considers the quadratic term, while `alpha -> 1` only considers the linear term.
While choosing `alpha=0` is possible in fused quadratic problems, and corresponds
to the pure quadratic problem, `alpha=0` is
not possible, and hence linear problems must be chosen.

.. GENERATED FROM PYTHON SOURCE LINES 46-60

.. code-block:: default


    gwp = GWProblem(adata)
    gwp = gwp.prepare(key="batch", GW_x={"attr": "obsm", "key": "spatial"}, GW_y={"attr": "obsm", "key": "spatial"})
    gwp = gwp.solve(alpha=0, epsilon=1e-1)

    fgwp = FGWProblem(adata)
    fgwp = fgwp.prepare(
        key="batch", GW_x={"attr": "obsm", "key": "spatial"}, GW_y={"attr": "obsm", "key": "spatial"}, joint_attr="X_pca"
    )
    fgwp = fgwp.solve(epsilon=1e-1)

    max_difference = np.max(np.abs(gwp["0", "1"].solution.transport_matrix - fgwp["0", "1"].solution.transport_matrix))
    print(f"{max_difference:.6f}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Solving problem OTProblem[stage='prepared', shape=(20, 20)].           
    INFO     Solving problem OTProblem[stage='prepared', shape=(20, 20)].           
    0.021585




.. GENERATED FROM PYTHON SOURCE LINES 61-68

Low-rank solutions
~~~~~~~~~~~~~~~~~~
Whenever the dataset is very large, the computational complexity can be
reduced by setting `rank` to a positive integer (:cite:`scetbon:21a`). In this
case, `epsilon` can also be set to 0, while only the balanced case
(`tau_a = tau_b = 1`) is supported. Moreover, the data has to be provided
as point clouds, i.e. no precomputed cost matrix can be passed.

.. GENERATED FROM PYTHON SOURCE LINES 68-70

.. code-block:: default

    gwp = gwp.solve(epsilon=1e-2, rank=3)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Solving problem OTProblem[stage='solved', shape=(20, 20)].             




.. GENERATED FROM PYTHON SOURCE LINES 71-75

Scaling the cost
~~~~~~~~~~~~~~~~
`scale_cost` works the same way as for linear problems. Note that all cost
terms will be scaled by the same argument.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.330 seconds)

**Estimated memory usage:**  66 MB


.. _sphx_glr_download_auto_examples_solvers_ex_quad_problems_basic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: ex_quad_problems_basic.py <ex_quad_problems_basic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: ex_quad_problems_basic.ipynb <ex_quad_problems_basic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
