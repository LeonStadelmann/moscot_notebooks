
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/solvers/ex_quad_problems_advanced.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_solvers_ex_quad_problems_advanced.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_solvers_ex_quad_problems_advanced.py:


Solving quadratic problems - advanced
-------------------------------------

.. seealso::
    See :ref:`sphx_glr_auto_examples_solvers_ex_quad_problems_basic.py` for an introduction
    to solving quadratic problems.
    See :ref:`sphx_glr_auto_examples_solvers_ex_linear_problems_basic.py` for an introduction
    to solving linear problems.
    See :ref:`sphx_glr_auto_examples_solvers_ex_linear_problems_advanced.py` for an advanced
    example how to solve linear problems.

.. GENERATED FROM PYTHON SOURCE LINES 14-18

.. code-block:: default


    from moscot.datasets import simulate_data
    from moscot.problems.generic import GWProblem








.. GENERATED FROM PYTHON SOURCE LINES 19-28

This examples is a continuation of TODO reference and shows advanced examples
for how to solve quadratic problems,
e.g. the
:class:`moscot.problems.time.LineageProblem`,
the :class:`moscot.problems.spatio_temporal.SpatioTemporalProblem`,
the :class:`moscot.problems.space.MappingProblem`,
the :class:`moscot.problems.time.AlignmentProblem`,
the :class:`moscot.problems.generic.GWProblem`,
and the the :class:`moscot.problems.generic.FGWProblem`.

.. GENERATED FROM PYTHON SOURCE LINES 28-36

.. code-block:: default

    import scanpy as sc

    adata = simulate_data(n_distributions=2, key="batch", quad_term="spatial")
    sc.pp.pca(adata)
    gwp = GWProblem(adata)
    gwp = gwp.prepare(key="batch", GW_x={"attr": "obsm", "key": "spatial"}, GW_y={"attr": "obsm", "key": "spatial"})
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/moscot/datasets/_datasets.py:251: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      AnnData(
    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/anndata/_core/anndata.py:1785: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      [AnnData(sparse.csr_matrix(a.shape), obs=a.obs) for a in all_adatas],

    AnnData object with n_obs × n_vars = 40 × 60
        obs: 'batch', 'celltype'
        uns: 'pca'
        obsm: 'spatial', 'X_pca'
        varm: 'PCs'



.. GENERATED FROM PYTHON SOURCE LINES 37-43

Threshold
~~~~~~~~~
The `threshold` parameter defines the convergence criterion. In the balanced
setting the `threshold` denotes the deviation between prior and posterior
marginals, while in the unbalanced setting the `threshold` corresponds to
a Cauchy sequence stopping criterion.

.. GENERATED FROM PYTHON SOURCE LINES 46-54

Initializers
~~~~~~~~~~~~
Different Initializers can help to improve convergence. For the full-rank
case only the default initializer exists, hence the `initializer` argument
must be set to `None`.

For low-rank problems the same initializers as for the linear low-rank solvers
are available, and `initializer_kwargs` can be passed the same way, see TODO

.. GENERATED FROM PYTHON SOURCE LINES 56-62

Number of iterations
~~~~~~~~~~~~~~~~~~~~
To solve a quadratic Optimal Transport problem, a consecutively updated linearized
problem is solved `n_iterations` time. Here, `min_iterations` denotes a lower bound
for `n_iterations` and `max_iterations` an upper bound. If `max_iterations` is too
low, the model might not converge.

.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: default

    gwp = gwp.solve(alpha=0.5, epsilon=1e-1, min_iterations=0, max_iterations=1)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Solving problem OTProblem[stage='prepared', shape=(20, 20)].           
    WARNING  Solver did not converge                                                




.. GENERATED FROM PYTHON SOURCE LINES 65-73

Iterations of the inner loop & linear solver keyword arguments
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
As mentioned above, each outer loop step of the Gromov-Wasserstein algorithm
consists of solving a linear problem. Arguments for the linear solver can
be specified via `linear_solver_kwargs`, keyword arguments for
:class:`ott.core.sinkhorn.Sinkhorn` in the full-rank case or keyword arguments
for :class:`ott.core.sinkhorn_lr.LRSinkhorn`, respectively. This way, we can
also set the minimum and maximum number of iterations for the linear solver:

.. GENERATED FROM PYTHON SOURCE LINES 73-78

.. code-block:: default

    ls_kwargs = {"min_iterations": 10, "max_iterations": 1000, "threshold": 0.01}
    gwp = gwp.solve(
        alpha=0.5, epsilon=1e-1, threshold=0.1, min_iterations=2, max_iterations=20, linear_solver_kwargs=ls_kwargs
    )





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Solving problem OTProblem[stage='solved', shape=(20, 20)].             
    WARNING  Solver did not converge                                                




.. GENERATED FROM PYTHON SOURCE LINES 79-84

Low rank hyperparameters
~~~~~~~~~~~~~~~~~~~~~~~~
The parameters `gamma` and `gamma_rescale` are the same as in the linear case,
see example TODO.
It remains to consider `ranks` and `tolerances`.

.. GENERATED FROM PYTHON SOURCE LINES 87-95

Keyword arguments & Implementation details
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Whenever the `solve` method of a quadratic problem is called,
a backend-specific quadratic solver is instantiated. Currently, :mod:`ott` is
supported, its corresponding quadratic solvers is :class:`ott.core.gromov_wasserstein.GromovWasserstein`,
handling both the full-rank and the low-rank case. :mod:`moscot` wraps this
class in :class:`moscot.backends.ott.GWSolver` and :class:`moscot.backends.ott.FGWSolver`,
handling the purely quadratic and the fused quadratic problem, respectively.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.961 seconds)

**Estimated memory usage:**  45 MB


.. _sphx_glr_download_auto_examples_solvers_ex_quad_problems_advanced.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: ex_quad_problems_advanced.py <ex_quad_problems_advanced.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: ex_quad_problems_advanced.ipynb <ex_quad_problems_advanced.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
